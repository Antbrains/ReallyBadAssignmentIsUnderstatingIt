package ANTGAME;
import java.util.ArrayList;
/* ----------------------------------GROUP6----------------------------------
 * Author M.K
 * Monday 15th April 2013
 * 
 * This class creates a HIVE object used to store food and to spawn the ants.
 * 
 * This class is called by the GUI class to create a hive, given its location...
 * ...by the GUI class. It then returns a HIVE object to be used. 
 * 
 * If you edit this, please comment what you have changed and re-upload it please.
 * ----------------------------------GROUP6----------------------------------
 */
public class Hive 
{
	private Brain hiveMind;
	int antsInside;
	int hiveLimit;
	private static int totalFood ;
	int xLoc;
	int yLoc;
	boolean ghost;
	int team; 
	private static ArrayList<ANT> antsInHiveArray = new ArrayList<ANT>();
	public Hive hive(int x_coord, int y_coord, int givenTeam, Brain givenBrain)
	{
		this.hiveMind = givenBrain;
		this.xLoc = x_coord;
		this.yLoc = y_coord;
		this.antsInside = 0;
		totalFood = 0;
		this.ghost = false;
		this.team = givenTeam;
		fillHive();
		return this;
	}
	
	/*This method will be called by the GUI once the teams(1-4) hives are made, using a...
	 * ...loop depending on the size of the teamCount variable.
	 */
	private void fillHive()
	{
		hiveLimit = 200;
		for (int i = 0; i < hiveLimit; i++)
		{
			Ant ant = new Ant(i+1,this.team,0);
			ant.xLoc = this.xLoc;
			ant.yLoc = this.yLoc;
			Hive.getAntsInHiveArray().add(i, ant);
		}
	}
	
	public static void acceptANT(Ant antGiven, int i, int foodGiven)
	{
		getAntsInHiveArray().add(i, antGiven);
		takeFood(i, foodGiven);
	}
	public static void sendANT()
	{
		if(getAntsInHiveArray().isEmpty())
		{
		    // Do something with the empty list here.
		}
		else 
		{
			ANT ant = getAntsInHiveArray().get(1);
			main.takeAntFromHive(ant, ant.antID);
		}
		
	}
	public static void takeFood(int antID, int foodValue)
	{
		int fwa = foodValue;
		addFood(fwa);
	}
	public ANT getThisAnt(int x, int y)
	{
		int wantedXpos = x;
		int wantedYpos = y;
		int currentYpos;
		int currentXpos;
	
		for(int i = 0; i < antsInHiveArray.size(); i++)
		{
			currentXpos = antsInHiveArray.get(i).xLoc;
			if (currentXpos == wantedXpos)
			{
				i = 0;
				do{
					currentYpos = antsInHiveArray.get(i).yLoc;
					i++;
				}while(currentYpos != wantedYpos);
			return antsInHiveArray.get(i);
			}
			else
			{
				throw new Exception("Invalid location provided.");
			}	
		}
	}
	public static ArrayList<ANT> getAntsInHiveArray() {
		return antsInHiveArray;
	}

	public static void setAntsInHiveArray(ArrayList<ANT> antsInHiveArray) {
		Hive.antsInHiveArray = antsInHiveArray;
	}

	public static int getTotalFood() {
		return totalFood;
	}

	public static void addFood(int food) {
		Hive.totalFood =+ totalFood;
	}


}
